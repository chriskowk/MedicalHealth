/* 
* Copyright 2007 OpenSymphony 
* 
* Licensed under the Apache License, Version 2.0 (the "License"); you may not 
* use this file except in compliance with the License. You may obtain a copy 
* of the License at 
* 
*   http://www.apache.org/licenses/LICENSE-2.0 
*   
* Unless required by applicable law or agreed to in writing, software 
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
* License for the specific language governing permissions and limitations 
* under the License.
* 
*/
using Common.Logging;
using Quartz;

namespace Quartz.Examples.Example6
{
	
	/// <summary> <p>
	/// A job dumb job that will throw a job execution exception
	/// </p>
	/// 
	/// </summary>
	/// <author>  Bill Kratzer
	/// </author>
	public class BadJob2 : IStatefulJob
	{
		
		// Logging
		private static ILog _log = LogManager.GetLogger(typeof(BadJob2));

		/// <summary>
		/// Called by the <see cref="IScheduler" /> when a <see cref="Trigger" />
		/// fires that is associated with the <see cref="IJob" />.
		/// <p>
		/// The implementation may wish to set a  result object on the
		/// JobExecutionContext before this method exits.  The result itself
		/// is meaningless to Quartz, but may be informative to
		/// <see cref="JobListeners" /> or
		/// <see cref="TriggerListeners" /> that are watching the job's
		/// execution.
		/// </p>
		/// </summary>
		/// <param name="context">Execution context.</param>
		public virtual void Execute(JobExecutionContext context)
		{
			System.String jobName = context.JobDetail.FullName;
			_log.Info(string.Format("---{0} executing at {1}", jobName, System.DateTime.Now.ToString("r")));
			
			// a contrived example of an exception that
			// will be generated by this job due to a 
			// divide by zero error
			try
			{
				int zero = 0;
				int calculation = 4815 / zero;
			}
			catch (System.Exception e)
			{
				_log.Info("--- Error in job!");
				JobExecutionException e2 = new JobExecutionException(e);
				// Quartz will automatically unschedule
				// all triggers associated with this job
				// so that it does not run again
				e2.UnscheduleAllTriggers = true;
				throw e2;
			}
			
			_log.Info(string.Format("---{0} completed at {1}", jobName, System.DateTime.Now.ToString("r")));
		}
	}
}
