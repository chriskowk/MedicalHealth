using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LunarCalendar
{
    public class UltraCalendar
    {
        private bool _hasConverted;
        private int _convertFlag;       //==0 则输入日期为西历, !=0 则输入为农历
        private DateTime _solarDate;  //完整日期 2000-01-01
        private int _solarYear;    //输出或输入之西历年份
        private int _solarMonth;   //西历月
        private int _solarDay;    //西历日
        private int _lunarYear;    //输出或输入之农历年份
        private int _lunarMonth;   //农历月
        private int _lunarDay;    //农历日
        private int _weekday;      //该日为星期几 ( 0==星期日, 1==星期一, ... )
        private int _kan;          //该日天干 ( 0==甲, 1==乙, 2==丙, 3==丁, 4==戊, 5==己, 6==庚, 7==辛, 8==壬, 9==癸 )
        private int _chih;         //该日地支 ( 0==子, 1==丑, 2==寅, 3==卯, 4==辰, 5==巳, 6==午, 7==未, 8==申, 9==酉, 10==戌, 11==亥)
        private string _cLunarYear;
        private string _cLunarMonth;
        private string _cLunarDay;
        private string _cWeekday;
        private string _cKanChih;
        private string _solarTerm;
        private string _horoscope;
        private string _animalYear;
        private string _solarHoliday;
        private string _lunarHoliday;
        private string _weekHoliday;

        public bool IsFestival
        {
            get
            {
                return !string.IsNullOrEmpty(this._solarHoliday) || !string.IsNullOrEmpty(this._weekHoliday) || !string.IsNullOrEmpty(this._lunarHoliday);
            }
        }

        public string FestivalName
        {
            get
            {
                return !string.IsNullOrEmpty(this._solarHoliday) ? this._solarHoliday : (!string.IsNullOrEmpty(this._weekHoliday) ? this._weekHoliday : this._lunarHoliday);
            }
        }

        public bool HasConverted
        {
            get { return this._hasConverted; }
        }

        public DateTime SolarDate
        {
            get { return this._solarDate; }
        }
        public int SolarYear
        {
            get { return this._solarYear; }
        }
        public int SolarMonth
        {
            get { return this._solarMonth; }
        }
        public int SolarDay
        {
            get { return this._solarDay; }
        }
        public int LunarYear
        {
            get { return this._lunarYear; }
        }
        public int LunarMonth
        {
            get { return this._lunarMonth; }
        }
        public int LunarDay
        {
            get { return this._lunarDay; }
        }
        public int Weekday
        {
            get { return this._weekday; }
        }
        public int Kan
        {
            get { return this._kan; }
        }
        public int Chih
        {
            get { return this._chih; }
        }
        public string CKanChih
        {
            get { return this._cKanChih; }
        }
        public string CLunarYear
        {
            get { return this._cLunarYear; }
        }
        public string CLunarMonth
        {
            get { return this._cLunarMonth; }
        }
        public string CLunarDay
        {
            get { return this._cLunarDay; }
        }
        public string CWeekday
        {
            get { return this._cWeekday; }
        }
        public string SolarTerm
        {
            get { return this._solarTerm; }
        }
        public string SolarHoliday
        {
            get { return this._solarHoliday; }
        }
        public string LunarHoliday
        {
            get { return this._lunarHoliday; }
        }
        public string WeekHoliday
        {
            get { return this._weekHoliday; }
        }
        public string Horoscope
        {
            get { return this._horoscope; }
        }
        public string AnimalYear
        {
            get { return this._animalYear; }
        }

        //int[] array1 = new int[5] { 1, 3, 5, 7, 9 };
        //int[,] array2D = new int[,] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } };
        //int[, ,] array3D = new int[,,] { { { 1, 2, 3 } }, { { 4, 5, 6 } } };
        private const int FIRSTYEAR = 1901;
        private const int LASTYEAR = 2100;
        private const string TG = "甲乙丙丁戊己庚辛壬癸";
        private const string DZ = "子丑寅卯辰巳午未申酉戌亥";
        private const string NUM = "一二三四五六七八九十";
        private const string MONTHNUM = "正二三四五六七八九十冬腊";

        string[] TGS = new string[10] { "甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸" };
        string[] DZS = new string[12] { "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥" };
        string[] NUMS = new string[10] { "一", "二", "三", "四", "五", "六", "七", "八", "九", "十" };
        string[] MONTHNUMS = new string[12] { "正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "冬", "腊" };
        string[] ANIMALS = new string[12] { "鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪" };
        /* 西历年每月之日数 */
        int[] SolarCal = new int[12] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

        /* 西历年每月之累积日数, 平年与闰年 */
        int[,] SolarDays = new int[2, 14] {
            { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365, 396 },
            { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366, 397 } 
        };

        //struct WeekHolidayStru
        //{
        //    int Month;
        //    int WeekAtMonth;
        //    int Weekday;
        //    string HolidayName;
        //}
        string[,] WeekHolidays = new string[8, 4] { 
            {"5", "2", "0", "母亲节"}, 
            {"5", "3", "0", "全国助残日"}, 
            {"6", "3", "0", "父亲节"},
            {"9", "3", "2", "国际和平日"},
            {"9", "4", "0", "国际聋人节"},
            {"10", "1", "1", "国际住房日"},
            {"10", "1", "3", "国际减轻自然灾害"},
            {"11", "4", "4", "感恩节"}
        };

        //struct LunarHolidayStru
        //{
        //    int Month;
        //    int Day;
        //    int Recess;   //是否放假（0－不放假; 1－放假）
        //    string HolidayName;
        //}
        string[,] LunarHolidays = new string[9, 4] { 
            {"1", "1", "1", "春节"},
            {"1", "15", "0", "元宵节"},
            {"5", "5", "0", "端午节"},
            {"7", "7", "0", "七夕情人节"},
            {"7", "15", "0", "中元节/盂兰盆节"},
            {"8", "15", "0", "中秋节"},
            {"9", "9", "0", "重阳节"},
            {"12", "8", "0", "腊八节"},
            {"12", "24", "0", "小年"}
        };

        //struct SolarHolidayStru
        //{
        //    int Month;
        //    int Day;
        //    int Recess;   //是否放假（0－不放假; 1－放假）
        //    string HolidayName;
        //}
        string[,] SolarHolidays = new string[74, 4] { 
             {"1", "1", "1", "元旦"},
             {"2", "2", "0", "世界湿地日"},
             {"2", "7", "0", "国际声援南非日"},
             {"2", "14", "0", "西方情人节"},
             {"2", "10", "0", "国际气象节"},
             {"3", "1", "0", "国际海豹日"},
             {"3", "3", "0", "全国爱耳日"},
             {"3", "8", "0", "国际妇女节"},
             {"3", "12", "0", "植树节"},
             {"3", "15", "0", "消费者权益日"},
             {"3", "24", "0", "世界防治结核病日"},
             {"4", "1", "0", "愚人节"},
             {"4", "7", "0", "世界卫生日"},
             {"4", "22", "0", "世界地球日"},
             {"4", "23", "0", "世界图书和版权日"},
             {"5", "1", "1", "国际劳动节"},
             {"5", "4", "0", "中国五四青年节"},
             {"5", "8", "0", "世界红十字日"},
             {"5", "12", "0", "国际护士节"},
             {"5", "15", "0", "国际家庭日"},
             {"5", "17", "0", "世界电信日"},
             {"5", "18", "0", "国际博物馆日"},
             {"5", "23", "0", "国际牛奶日"},
             {"5", "31", "0", "世界无烟日"},
             {"6", "1", "1", "儿童节"},
             {"6", "5", "0", "世界环境日"},
             {"6", "6", "0", "全国爱眼日"},
             {"6", "17", "0", "防治荒漠化干旱日"},
             {"6", "23", "0", "国际奥林匹克日"},
             {"6", "26", "0", "国际反毒品日"},
             {"7", "1", "0", "建党节/香港回归"},
             {"7", "2", "0", "国际体育记者日"},
             {"7", "7", "0", "抗日战争纪念日"},
             {"7", "11", "0", "世界人口日"},
             {"7", "30", "0", "非洲妇女日"},
             {"8", "1", "0", "中国建军节"},
             {"8", "8", "0", "中国男子节/爸爸节"},
             {"9", "8", "0", "国际扫盲日"},
             {"9", "9", "0", "毛泽东逝世纪念"},
             {"9", "10", "1", "教师节"},
             {"9", "14", "0", "世界清洁地球日"},
             {"9", "16", "0", "国际臭氧层保护日"},
             {"9", "18", "0", "九·一八事变纪念"},
             {"9", "20", "0", "国际爱牙日"},
             {"9", "27", "0", "世界旅游日"},
             {"10", "1", "1", "国庆节"},
             {"10", "4", "0", "世界动物日"},
             {"10", "6", "0", "老人节"},
             {"10", "8", "0", "全国高血压日"},
             {"10", "9", "0", "世界邮政日"},
             {"10", "13", "0", "世界保健日"},
             {"10", "14", "0", "世界标准日"},
             {"10", "15", "0", "国际盲人节"},
             {"10", "16", "0", "世界粮食日"},
             {"10", "17", "0", "世界消除贫困日"},
             {"10", "24", "0", "联合国日"},
             {"10", "31", "0", "世界勤俭日"},
             {"11", "8", "0", "中国记者日"},
             {"11", "10", "0", "世界青年节"},
             {"11", "12", "0", "孙中山诞辰纪念"},
             {"11", "14", "0", "世界糖尿病日"},
             {"11", "17", "0", "国际大学生节"},
             {"11", "21", "0", "世界电视日"},
             {"12", "1", "0", "世界艾滋病日"},
             {"12", "3", "0", "世界残疾人日"},
             {"12", "8", "0", "国际儿童电视日"},
             {"12", "9", "0", "世界足球日"},
             {"12", "10", "0", "世界人权日"},
             {"12", "13", "0", "西安事变纪念日"},
             {"12", "20", "0", "澳门回归纪念"},
             {"12", "21", "0", "国际篮球日"},
             {"12", "24", "0", "平安夜"},
             {"12", "25", "0", "圣诞节"},
             {"12", "26", "0", "毛泽东诞辰纪念"}
        };

        //class tagLunarCal
        //{
        //    int BaseDays;         /*LunarCal[i, 0]: 到西历 1 月 1 日到农历正月初一的累积日数 */  
        //    int Intercalation;    /*LunarCal[i, 1]: 闰月月份. 0==此年没有闰月 */
        //    int BaseWeekday;      /*LunarCal[i, 2]: 此年西历 1 月 1 日为星期几再减 1 */
        //    int BaseKanChih;      /*LunarCal[i, 3]: 此年公历1月1日之干支序号(函数GetKanChihNum("癸酉"))减 1 (甲子：60 乙丑:1 丙寅:2 丁卯:3 ......)*/
        //    int[] MonthDays = new int[13];    /*LunarCal[i, 4]～LunarCal[i, 17]: 此农历年每月之大小, 0==小月(29日), 1==大月(30日) */
        //};
        int[,] LunarCal = new int[200, 17] {
            { 49, 0, 1, 14, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },    /* 1901 */
            { 38, 0, 2, 19, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
            { 28, 5, 3, 24, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
            { 46, 0, 4, 29, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
            { 34, 0, 6, 35, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0 },
            { 24, 4, 0, 40, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },    /* 1906 */
            { 43, 0, 1, 45, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
            { 32, 0, 5, 21, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
            { 21, 2, 4, 56, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 40, 0, 5, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 29, 6, 6, 6, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1 },    /* 1911 */
            { 48, 0, 0, 11, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1 },
            { 36, 0, 2, 17, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
            { 25, 5, 3, 22, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
            { 44, 0, 4, 27, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1 },
            { 33, 0, 5, 32, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },   /* 1916 */
            { 22, 2, 0, 38, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
            { 41, 0, 1, 43, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
            { 31, 7, 2, 48, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
            { 50, 0, 3, 53, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1 },
            { 38, 0, 5, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1 },    /* 1921 */
            { 27, 5, 6, 4, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
            { 46, 0, 0, 9, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 35, 0, 1, 14, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1 },
            { 23, 4, 3, 20, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1 },
            { 43, 0, 4, 25, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },   /* 1926 */
            { 32, 0, 5, 54, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
            { 22, 2, 6, 35, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1 },
            { 40, 0, 1, 41, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0 },
            { 29, 6, 2, 46, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0 },
            { 47, 0, 3, 51, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },   /* 1931 */
            { 36, 0, 4, 56, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 25, 5, 6, 2, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1 },
            { 44, 0, 0, 7, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
            { 34, 0, 1, 12, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
            { 23, 3, 2, 17, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0 },   /* 1936 */
            { 41, 0, 4, 23, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 30, 7, 5, 28, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1 },
            { 49, 0, 6, 33, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
            { 38, 0, 0, 38, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },   /* 1940 */
            { 26, 6, 2, 44, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 45, 0, 3, 49, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
            { 35, 0, 4, 54, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
            { 24, 4, 5, 59, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },   /* 1944 */
            { 43, 0, 0, 5, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
            { 32, 0, 1, 10, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1 },
            { 21, 2, 2, 15, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
            { 40, 0, 3, 20, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },   /* 1948 */
            { 28, 7, 5, 26, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
            { 47, 0, 6, 31, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1 },
            { 36, 0, 0, 36, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
            { 26, 5, 1, 41, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },   /* 1952 */
            { 44, 0, 3, 47, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1 },
            { 33, 0, 4, 52, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
            { 23, 3, 5, 57, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1 },
            { 42, 0, 6, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1 },    /* 1956 */
            { 30, 8, 1, 8, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0 },
            { 48, 0, 2, 13, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0 },
            { 38, 0, 3, 18, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
            { 27, 6, 4, 23, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0 },   /* 1960 */
            { 45, 0, 6, 29, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0 },
            { 35, 0, 0, 34, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
            { 24, 4, 1, 39, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
            { 43, 0, 2, 44, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },   /* 1964 */
            { 32, 0, 4, 50, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
            { 20, 3, 5, 55, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },
            { 39, 0, 6, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0 },
            { 29, 7, 0, 5, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },    /* 1968 */
            { 47, 0, 2, 11, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
            { 36, 0, 3, 16, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
            { 26, 5, 4, 21, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 45, 0, 5, 26, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },   /* 1972 */
            { 33, 0, 0, 32, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1 },
            { 22, 4, 1, 37, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
            { 41, 0, 2, 42, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
            { 30, 8, 3, 47, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },   /* 1976 */
            { 48, 0, 5, 53, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1 },
            { 37, 0, 6, 58, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
            { 27, 6, 0, 3, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
            { 46, 0, 1, 8, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0 },    /* 1980 */
            { 35, 0, 3, 14, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
            { 24, 4, 4, 19, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1 },
            { 43, 0, 5, 24, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1 },
            { 32, 10, 6, 29, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1 },  /* 1984 */
            { 50, 0, 1, 35, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 39, 0, 2, 40, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1 },
            { 28, 6, 3, 45, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0 },
            { 47, 0, 4, 50, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },   /* 1988 */
            { 36, 0, 6, 56, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0 },
            { 26, 5, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1 },
            { 45, 0, 1, 6, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0 },
            { 34, 0, 2, 11, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0 },   /* 1992 */
            { 22, 3, 4, 17, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 40, 0, 5, 22, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 30, 8, 6, 27, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1 },
            { 49, 0, 0, 32, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1 },   /* 1996 */
            { 37, 0, 2, 38, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
            { 27, 5, 3, 43, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1 },
            { 46, 0, 4, 48, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 35, 0, 5, 53, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1 },   /* 2000 */
            { 23, 4, 0, 59, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
            { 42, 0, 1, 4, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
            { 31, 0, 2, 9, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 21, 2, 3, 14, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },   /* 2004 */
            { 39, 0, 5, 20, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
            { 28, 7, 6, 25, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
            { 48, 0, 0, 30, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
            { 37, 0, 1, 35, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1 },   /* 2008 */
            { 25, 5, 3, 41, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
            { 44, 0, 4, 46, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
            { 33, 0, 5, 51, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
            { 22, 4, 6, 56, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },   /* 2012 */
            { 40, 0, 1, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
            { 30, 9, 2, 7, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },
            { 49, 0, 3, 12, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1 },
            { 38, 0, 4, 17, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0 },   /* 2016 */
            { 27, 6, 6, 23, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1 },
            { 46, 0, 0, 28, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0 },
            { 35, 0, 1, 33, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },
            { 24, 4, 2, 38, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },   /* 2020 */
            { 42, 0, 4, 44, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
            { 31, 0, 5, 49, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0 },
            { 21, 2, 6, 54, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },
            { 40, 0, 0, 59, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },   /* 2024 */
            { 28, 6, 2, 5, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
            { 47, 0, 3, 10, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1 },
            { 36, 0, 4, 15, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
            { 25, 5, 5, 20, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },   /* 2028 */
            { 43, 0, 0, 26, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
            { 32, 0, 1, 31, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0 },
            { 22, 3, 2, 36, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0 },   /* 2031 */
            { 41, 0, 3, 41, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
            { 30, 11, 5, 47, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 49, 0, 6, 52, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
            { 38, 0, 0, 57, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1 },
            { 27, 6, 1, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1 },    /* 2036 */
            { 45, 0, 3, 8, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
            { 34, 0, 4, 13, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
            { 23, 5, 5, 18, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0 },
            { 42, 0, 6, 23, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0 },
            { 31, 0, 1, 29, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0 },   /* 2041 */
            { 21, 2, 2, 34, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
            { 40, 0, 3, 39, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
            { 29, 7, 4, 44, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1 },
            { 47, 0, 6, 50, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1 },
            { 36, 0, 0, 55, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1 },   /* 2046 */
            { 25, 5, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
            { 44, 0, 2, 5, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1 },
            { 32, 0, 4, 11, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0 },
            { 22, 3, 5, 16, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
            { 41, 0, 6, 21, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0 },   /* 2051 */
            { 31, 8, 0, 26, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1 },
            { 49, 0, 2, 32, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0 },
            { 38, 0, 3, 37, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0 },
            { 27, 6, 4, 42, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 45, 0, 5, 47, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },   /* 2056 */
            { 34, 0, 0, 53, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1 },
            { 23, 4, 1, 58, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0 },
            { 42, 0, 2, 3, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 32, 0, 3, 8, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 20, 3, 5, 59, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0 },   /* 2061 */
            { 39, 0, 6, 59, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0 },
            { 28, 7, 0, 59, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
            { 47, 0, 1, 59, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
            { 35, 0, 3, 59, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
            { 25, 5, 4, 59, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },   /* 2066 */
            { 44, 0, 5, 59, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
            { 33, 0, 6, 59, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
            { 22, 4, 1, 59, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 41, 0, 2, 59, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1 },
            { 30, 8, 3, 59, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },   /* 2071 */
            { 49, 0, 4, 59, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
            { 37, 0, 6, 59, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
            { 26, 6, 0, 59, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
            { 45, 0, 1, 59, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0 },
            { 35, 0, 2, 59, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },   /* 2076 */
            { 23, 4, 4, 59, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
            { 42, 0, 5, 59, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
            { 32, 0, 6, 59, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1 },
            { 21, 3, 0, 59, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1 },
            { 39, 0, 2, 59, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },   /* 2081 */
            { 28, 7, 3, 59, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1 },
            { 47, 0, 4, 59, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
            { 36, 0, 5, 59, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0 },
            { 25, 5, 0, 59, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1 },
            { 44, 0, 1, 59, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },   /* 2086 */
            { 33, 0, 2, 59, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
            { 23, 4, 3, 59, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0 },
            { 40, 0, 5, 59, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
            { 29, 8, 6, 59, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },
            { 48, 0, 0, 59, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },   /* 2091 */
            { 37, 0, 1, 59, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0 },
            { 26, 6, 3, 59, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0 },
            { 45, 0, 4, 59, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
            { 35, 0, 5, 59, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
            { 24, 4, 6, 59, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1 },   /* 2096 */
            { 42, 0, 1, 59, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1 },
            { 31, 0, 2, 59, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1 },
            { 20, 2, 3, 59, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1 },
            { 39, 0, 4, 59, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0 }   //最后2个值未经核对，可能不正确
        };

        //每年的二十四节气对应的阳历日期几乎固定，平均分布于十二个月中
        // 1月 2月 3月 4月 5月 6月
        //小寒 大寒 立春 雨水 惊蛰 春分 清明 谷雨 立夏 小满 芒种 夏至
        // 7月 8月 9月 10月 11月 12月
        //小暑 大暑 立秋 处暑 白露 秋分 寒露 霜降 立冬 小雪 大雪 冬至
        //*********************************************************************************
        // 节气无任何确定规律,所以只好存表,要节省空间,所以....
        //**********************************************************************************}
        //数据格式说明:
        //如1901年的节气为
        // 1月 2月 3月 4月 5月 6月 7月 8月 9月 10月 11月 12月
        // 6, 21, 4, 19, 6, 21, 5, 21, 6,22, 6,22, 8, 23, 8, 24, 8, 24, 8, 24, 8, 23, 8, 22
        // 9, 6, 11,4, 9, 6, 10,6, 9,7, 9,7, 7, 8, 7, 9, 7, 9, 7, 9, 7, 8, 7, 15
        //上面第一行数据为每月节气对应日期,
        //第二行数据生成规则:15减去每月第一个节气,每月第二个节气减去15得第二行
        // 这样每月两个节气对应数据都小于16,每月用一个字节存放,高位存放第一个节气数据,低位存放第二个节气的数据,可得下表
        byte[,] SolarTermFlags = new byte[200, 12] 
        {
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1901
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1902
            {0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78},  //1903
            {0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87},  //1904
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1905
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1906  '/* 1906 */
            {0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78},  //1907
            {0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1908
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1909
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1910
            {0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78},  //1911  '/* 1911 */
            {0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1912
            {0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1913
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1914
            {0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78},  //1915
            {0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1916  '/* 1916 */
            {0x95, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87},  //1917
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77},  //1918
            {0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78},  //1919
            {0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1920
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87},  //1921  '/* 1921 */
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77},  //1922
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78},  //1923
            {0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1924
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87},  //1925
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1926  '/* 1926 */
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1927
            {0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1928
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1929
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1930
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1931  '/* 1931 */
            {0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1932
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1933
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1934
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1935
            {0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1936  '/* 1936 */
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1937
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1938
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1939
            {0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1940  '/* 1940 */
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1941
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1942
            {0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1943
            {0x96, 0xA5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1944  '/* 1944 */
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1945
            {0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77},  //1946
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1947
            {0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //1948  '/* 1948 */
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x79, 0x77, 0x87},  //1949
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77},  //1950
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78},  //1951
            {0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //1952  '/* 1952 */
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1953
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x68, 0x78, 0x87},  //1954
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1955
            {0x96, 0xA5, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //1956  '/* 1956 */
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1957
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1958
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1959
            {0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //1960  '/* 1960 */
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1961
            {0x96, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1962
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1963
            {0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //1964  '/* 1964 */
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1965
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1966
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1967
            {0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //1968  '/* 1968 */
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1969
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1970
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77},  //1971
            {0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //1972  '/* 1972 */
            {0xA5, 0xB5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1973
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1974
            {0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77},  //1975
            {0x96, 0xA4, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x89, 0x88, 0x78, 0x87, 0x87},  //1976  '/* 1976 */
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //1977
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87},  //1978
            {0x96, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77},  //1979
            {0x96, 0xA4, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //1980  '/* 1980 */
            {0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x77, 0x87},  //1981
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1982
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77},  //1983
            {0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87},  //1984  '/* 1984 */
            {0xA5, 0xB4, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //1985
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1986
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x69, 0x78, 0x87},  //1987
            {0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //1988  '/* 1988 */
            {0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //1989
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //1990
            {0x95, 0xB4, 0x96, 0xA5, 0x86, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1991
            {0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //1992  '/* 1992 */
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //1993
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1994
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x76, 0x78, 0x69, 0x78, 0x87},  //1995
            {0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //1996  '/* 1996 */
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //1997
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //1998
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //1999
            {0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //2000   '/* 2000 */
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2001
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //2002
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //2003
            {0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //2004   '/* 2004 */
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2005
            {0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //2006
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87},  //2007
            {0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86},  //2008   '/* 2008 */
            {0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2009
            {0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //2010
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87},  //2011
            {0x96, 0xB4, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86},  //2012   '/* 2012 */
            {0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87},  //2013
            {0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //2014
            {0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //2015
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86},  //2016   '/* 2016 */
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87},  //2017
            {0xA5, 0xB4, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //2018
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //2019
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86},  //2020   '/* 2020 */
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //2021
            {0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2022
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87},  //2023
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},  //2024   '/* 2024 */
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //2025
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2026
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //2027
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},  //2028   '/* 2028 */
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //2029
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2030
            {0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87},  //2031   '/* 2031 */
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},  //2032
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x86},  //2033)
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x78, 0x88, 0x78, 0x87, 0x87},  //2034
            {0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //2035
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},  //2036   '/* 2036 */
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},  //2037
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2038
            {0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //2039
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},  //2040
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86},  //2041   '/* 2041 */
            {0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2042
            {0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //2043
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x88, 0x87, 0x96},  //2044
            {0xA5, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86},  //2045
            {0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87},  //2046   '/* 2046 */
            {0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87},  //2047
            {0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96},  //2048
            {0xA4, 0xC3, 0xA5, 0xA5, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86},  //2049
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x78, 0x78, 0x87, 0x87},  //2050
            {0xA5, 0xB4, 0xA5, 0xA5, 0xA5, 0x96, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86},  /* 2051 */
            {0xA5, 0xB4, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86},
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87},
            {0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},  //2055
            {0xA5, 0xB4, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96},    /* 2056 */
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},
            {0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},
            {0xA5, 0xB4, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x87, 0x96, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},    /* 2061 */
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},
            {0xA5, 0xB4, 0xA5, 0xB4, 0xA5, 0xA4, 0x97, 0x87, 0x87, 0x87, 0x96, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},    /* 2066 */
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},
            {0xA5, 0xB4, 0xA5, 0xB4, 0xB5, 0xA5, 0x97, 0x97, 0x87, 0x87, 0x96, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86},
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87},    /* 2071 */
            {0xA5, 0xB4, 0xA5, 0xB4, 0xB5, 0xA5, 0x97, 0x97, 0x87, 0x87, 0x98, 0x86},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x88, 0x87, 0x96},
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86},
            {0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87},
            {0xA5, 0xB4, 0xB5, 0xB4, 0xB5, 0xA5, 0x97, 0x97, 0x87, 0x87, 0x96, 0x96},    /* 2076 */
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x88, 0x87, 0x96},
            {0xA5, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x88, 0x87, 0x78, 0x87, 0x86},
            {0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87},
            {0xA5, 0xB4, 0xA5, 0xB4, 0xB5, 0xA5, 0x97, 0x97, 0x87, 0x87, 0x96, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96},    /* 2081 */
            {0xA5, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86},
            {0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},
            {0xA5, 0xB4, 0xB5, 0xB4, 0xB5, 0xA5, 0x97, 0x97, 0x97, 0x87, 0x96, 0x96},
            {0xB4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86},    /* 2086 */
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87},
            {0xA5, 0xB4, 0xB4, 0xB4, 0xB5, 0xB5, 0x97, 0x97, 0x97, 0x87, 0x96, 0x96},
            {0xB4, 0xB4, 0xB4, 0xB4, 0xB5, 0xB5, 0x97, 0x97, 0x97, 0x87, 0x96, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},    /* 2091 */
            {0xA5, 0xB4, 0xB4, 0xB4, 0xB5, 0xB5, 0x97, 0x97, 0x97, 0x87, 0x96, 0x96},
            {0xB4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x87, 0x96, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},
            {0xA5, 0xB3, 0xB4, 0xB4, 0xB5, 0xB5, 0x97, 0x97, 0x97, 0x87, 0x96, 0x96},    /* 2096 */
            {0xB4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x97, 0x87, 0x87, 0x96, 0x96},
            {0xA4, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96},
            {0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86},
            {0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87}  //最后2个值未经核对，可能不正确
        };
        string[] SolarTermNames = new string[24]
        {
            "小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至"
        };

        public UltraCalendar(DateTime dt)
        {
            this._convertFlag = 0;
            this._solarYear = dt.Year;
            this._solarMonth = dt.Month;
            this._solarDay = dt.Day;
            this._hasConverted = DoConvert();
        }

        public UltraCalendar(byte ConvertFlag, int Year, int Month, int Day)  //当SourceFlag=0时:入参分别为公历年月日；否则为农历的年月日
        {
            if (ConvertFlag == 0)
            {
                this._convertFlag = 0;
                this._solarYear = Year;
                this._solarMonth = Month;
                this._solarDay = Day;
            }
            else
            {
                this._convertFlag = 1;
                this._lunarYear = Year;
                this._lunarMonth = Month;
                this._lunarDay = Day;
            }
            this._hasConverted = DoConvert();
        }

        private int GetLeap(int year)
        {
            if (year % 400 == 0)
                return 1;
            else if (year % 100 == 0)
                return 0;
            else if (year % 4 == 0)
                return 1;
            else
                return 0;
        }

        /* 西历农历转换 */
        private bool DoConvert()
        {
            int leap, d, sm, y, im, l1, l2, acc, i, lm, kc;

            if (this._convertFlag == 0)  /* 西历转换为农历 */
            {
                if (this.SolarYear <= FIRSTYEAR || this.SolarYear > LASTYEAR)
                    return false;

                sm = this.SolarMonth - 1;
                if (sm < 0 || sm > 11)
                    return false;
                leap = GetLeap(this.SolarYear);

                if (sm == 1)
                    d = leap + 28;
                else
                    d = SolarCal[sm];

                if (this.SolarDay < 1 || this.SolarDay > d)
                    return false;

                y = this.SolarYear - FIRSTYEAR;
                acc = SolarDays[leap, sm] + this.SolarDay;
                this._weekday = (acc + LunarCal[y, 2]) % 7;  //.BaseWeekday
                kc = acc + LunarCal[y, 3];  //.BaseKanChih
                this._kan = kc % 10;
                this._chih = kc % 12;

                if (acc <= LunarCal[y, 0])    //.BaseDays
                {
                    y--;
                    this._lunarYear = this.SolarYear - 1;
                    leap = GetLeap(this.LunarYear);
                    sm += 12;
                    acc = SolarDays[leap, sm] + this.SolarDay;
                }
                else
                    this._lunarYear = this.SolarYear;

                l1 = LunarCal[y, 0];    //.BaseDays

                for (i = 0; i < 13; i++)
                {
                    l2 = l1 + LunarCal[y, 4 + i] + 29;
                    if (acc <= l2)
                        break;
                    l1 = l2;
                }

                this._lunarMonth = i + 1;
                this._lunarDay = acc - l1;
                im = LunarCal[y, 1]; //Intercalation

                if (im != 0 && this.LunarMonth > im)
                {
                    this._lunarMonth--;
                    if (this.LunarMonth == im)
                        this._lunarMonth = -im;
                }

                if (this.LunarMonth > 12)
                    this._lunarMonth -= 12;
            }
            else  /* 农历转换为西历 */
            {
                if (this.LunarYear < FIRSTYEAR || this.LunarYear >= LASTYEAR)
                    return false;

                y = this.LunarYear - FIRSTYEAR;
                im = LunarCal[y, 1];    //.Intercalation
                lm = this.LunarMonth;

                if (lm < 0)
                {
                    if (lm != -im)
                        return false;
                }
                else if (lm < 1 || lm > 12)
                    return false;

                if (im != 0)
                {
                    if (lm > im)
                        lm++;
                    else if (lm == -im)
                        lm = im + 1;
                }

                lm--;

                if (this.LunarDay > LunarCal[y, 4 + lm] + 29)
                    return false;

                acc = LunarCal[y, 0];   //.BaseDays

                for (i = 0; i < lm; i++)
                    acc += LunarCal[y, 4 + i] + 29;

                acc += this.LunarDay;
                leap = GetLeap(this.LunarYear);

                for (i = 13; i >= 0; i--)
                    if (acc > SolarDays[leap, i])
                        break;

                this._solarDay = acc - SolarDays[leap, i];

                if (i <= 11)
                {
                    this._solarYear = this.LunarYear;
                    this._solarMonth = i + 1;
                }
                else
                {
                    this._solarYear = this.LunarYear + 1;
                    this._solarMonth = i - 11;
                }

                leap = GetLeap(this.SolarYear);
                y = this.SolarYear - FIRSTYEAR;
                acc = SolarDays[leap, this.SolarMonth - 1] + this.SolarDay;
                this._weekday = (acc + LunarCal[y, 2]) % 7;  //.BaseWeekday
                kc = acc + LunarCal[y, 3];  //.BaseKanChih
                this._kan = kc % 10;
                this._chih = kc % 12;
            }

            //增加计算描述字段
            this._solarDate = DateTime.Parse(this.SolarYear.ToString() + "-" + this.SolarMonth.ToString() + "-" + this.SolarDay.ToString());
            this._cWeekday = this.C2Weekday();
            this._cKanChih = this.C2KanChih();
            this._cLunarDay = this.C2LunarDay();
            this._cLunarMonth = this.C2LunarMonth();
            this._cLunarYear = this.C2LunarYear();
            this._solarTerm = this.GetSolarTerm();
            this._animalYear = this.C2AnimalYear();
            this._horoscope = this.GetHoroscope();
            this._solarHoliday = this.GetSolarHoliday();
            this._lunarHoliday = this.GetLunarHoliday();
            this._weekHoliday = this.GetWeekHoliday();

            return true;
        }

        private string C2KanChih()
        {
            return TGS[this.Kan] + DZS[this.Chih];
        }

        private string C2Weekday()
        {
            char[] dest = new char[1];

            StringBuilder src = new StringBuilder(NUM);
            dest[0] = ' ';   //" "[0];
            if (this.Weekday == 0)
                dest[0] = '日';  // "日"[0];
            else
                src.CopyTo((this.Weekday - 1), dest, 0, 1);
            return "星期" + dest[0];
        }

        private string C2LunarDay()
        {
            string result = "";
            int ix = 0;
            char[] dest = new char[1];

            StringBuilder src = new StringBuilder(NUM);
            dest[0] = ix.ToString()[0];

            if (this.LunarDay < 11)
                result = "初";
            else if (this.LunarDay < 20)
                result = "十";
            else if (this.LunarDay < 30)
                result = "廿";
            else
                result = "卅";

            src.CopyTo((this.LunarDay - 1) % 10, dest, 0, 1);
            return result + dest[0];
        }

        private string C2LunarMonth()
        {
            string result = "";

            if (this.LunarMonth < 1)
                result = "闰";
            return result + MONTHNUMS[Math.Abs(this.LunarMonth) - 1];
        }

        private string C2LunarYear()
        {
            return TGS[((this.LunarYear - 4) % 60) % 10] + DZS[((this.LunarYear - 4) % 60) % 12];
        }

        private string C2AnimalYear()
        {
            if (_dtSpringBegins.HasValue)
            {
                if (this._solarDate < _dtSpringBegins.Value)
                    return ANIMALS[(this.SolarYear - 1901) % 12];
                else
                    return ANIMALS[(this.SolarYear - 1900) % 12];
            }

            return ANIMALS[(this.LunarYear - 1900) % 12];
        }

        private string GetHoroscope()
        {
            DateTime dt;
            string result = "";

            dt = DateTime.Parse("2000-" + this.SolarMonth.ToString() + "-" + this.SolarDay.ToString());

            if (dt >= DateTime.Parse("2000-12-22") && dt <= DateTime.Parse("2000-12-31") || dt >= DateTime.Parse("2000-1-1") && dt <= DateTime.Parse("2000-1-19"))
                result = "摩羯";
            else if (dt >= DateTime.Parse("2000-1-20") && dt <= DateTime.Parse("2000-2-18"))
                result = "水瓶";
            else if (dt >= DateTime.Parse("2000-2-19") && dt <= DateTime.Parse("2000-3-20"))
                result = "双鱼";
            else if (dt >= DateTime.Parse("2000-3-21") && dt <= DateTime.Parse("2000-4-19"))
                result = "白羊";
            else if (dt >= DateTime.Parse("2000-4-20") && dt <= DateTime.Parse("2000-5-20"))
                result = "金牛";
            else if (dt >= DateTime.Parse("2000-5-21") && dt <= DateTime.Parse("2000-6-21"))
                result = "双子";
            else if (dt >= DateTime.Parse("2000-6-22") && dt <= DateTime.Parse("2000-7-22"))
                result = "巨蟹";
            else if (dt >= DateTime.Parse("2000-7-23") && dt <= DateTime.Parse("2000-8-22"))
                result = "狮子";
            else if (dt >= DateTime.Parse("2000-8-23") && dt <= DateTime.Parse("2000-9-22"))
                result = "处女";
            else if (dt >= DateTime.Parse("2000-9-23") && dt <= DateTime.Parse("2000-10-23"))
                result = "天秤";
            else if (dt >= DateTime.Parse("2000-10-24") && dt <= DateTime.Parse("2000-11-21"))
                result = "天蝎";
            else if (dt >= DateTime.Parse("2000-11-22") && dt <= DateTime.Parse("2000-12-21"))
                result = "射手";

            return result;
        }

        private DateTime? _dtSpringBegins;  //立春阳历日期
        private string GetSolarTerm() //取农历节气，如果该不是节气则返回空串
        {
            byte flag;
            int iYear, iMonth, iDay;
            int iTermDay;
            string result = "";

            iYear = this.SolarYear;
            iMonth = this.SolarMonth;
            iDay = this.SolarDay;

            flag = SolarTermFlags[iYear - FIRSTYEAR, iMonth - 1];
            if (iMonth == 2)
                _dtSpringBegins = new DateTime(iYear, iMonth, 15 - ((flag >> 4) & 0xF));

            if (iDay < 15)
                iTermDay = 15 - ((flag >> 4) & 0xF);
            else
                iTermDay = 15 + (flag & 0xF);

            if (iDay == iTermDay)
                if (iDay > 15)
                    result = SolarTermNames[(iMonth - 1) * 2 + 1];
                else
                    result = SolarTermNames[(iMonth - 1) * 2];

            return result;
        }

        //计算按第几周星期几计算的节日
        private string GetWeekHoliday()
        {
            DateTime fd;
            int iWeekNum;
            string result = "";

            for (int i = 0; i < (WeekHolidays.Length / 4); i++)
            {
                if (int.Parse(WeekHolidays[i, 0]) == this.SolarMonth)
                {
                    if (int.Parse(WeekHolidays[i, 2]) == this.Weekday)
                    {
                        fd = DateTime.Parse(this.SolarYear.ToString() + "-" + this.SolarMonth.ToString() + "-1");
                        iWeekNum = 0;

                        while (fd <= this.SolarDate)
                        {
                            if ((int)fd.DayOfWeek == this.Weekday)
                                iWeekNum++;
                            fd = fd.AddDays(1);
                        }

                        if (iWeekNum == int.Parse(WeekHolidays[i, 1]))
                        {
                            result = WeekHolidays[i, 3];
                            break;
                        }
                    }
                }
            }
            return result;
        }

        //计算公历节假日
        private string GetSolarHoliday()
        {
            string result = "";

            for (int i = 0; i < (SolarHolidays.Length / 4); i++)
            {
                if (int.Parse(SolarHolidays[i, 0]) == this.SolarMonth && int.Parse(SolarHolidays[i, 1]) == this.SolarDay)
                {
                    result = SolarHolidays[i, 3];
                    break;
                }
            }
            return result;
        }

        //计算农历节假日
        private string GetLunarHoliday()
        {
            string result = "";

            for (int i = 0; i < (LunarHolidays.Length / 4); i++)
            {
                if (int.Parse(LunarHolidays[i, 0]) == this.LunarMonth && int.Parse(LunarHolidays[i, 1]) == this.LunarDay)
                {
                    result = LunarHolidays[i, 3];
                    break;
                }
            }
            return result;
        }
    }
}
